# This code contains directives on the use of Basondole Tools
# Serves as  embeded manual in the core program
# AUTHOR: Paul S.I. Basondole

def manpage():
    man ='+----------------+\n|TOOLBAR OPTIONS:|\n+----------------+\n\n Home\t\tTakes user to the main screen of the program where user can navigate other operations\n\n Devices        Provides a view of the devices the program can interact with.\n\t\tThat is if the user can authenticate against the device successfully.\n\t\tThe window offers options to add or remove devices from the database.\n\t\tIf device is not in this list the program will not operate on it.\n\t\tWhen devices are added or removed, system must be reloaded for changes to take effect.\n\n Command        Provides use with a window to input arguments.\n\t\tAllows user to specify two arguments. \n\t\tFirst argument is commands which can be a string or list of commands separated by ":" or text file containing commands separated by a newline\n\t\tSecond argument is ip address which can be a string or a text file containing ip addresses separated by a new line\n\t\tThe ip address(es) specified in this window do not need to be in the devices list from above window.\n\n Settings       Provides user with three tabs for settings.\n\t\t- General settings includes the authentication server and the file path to the device database. \n\t\t  User must only specify the path of the directory that will contain the device database file, the database file itself will be created by the program with a ".bas" extension\n\t\t- Burst packages provides user with settings to specify the burst package server address and the full path to the burst client file.\n\t\t  Full path includes the file name and extension. If these settings are not specified the burst package operations will be disabled.\n\t\t- Bandwidth on Demand provides settings associated with the server for bandwidth on demand services. \n\t\t  User must manually create two directories in the working directory path sepecified in settings. \n\t\t  The two directories to be created in the server are "PendingTickets" and "Logs". The directory names are case sensitive.\n\t\t  If these settings are not specified the bandwidth on demand operations will be disabled.\n\t\tWhen settings are altered, system must be reloaded for changes to take effect.\n\n\n About\t\tProvides user with information about the program\t\n\n Quit\t\tExits the program\n\n\n\n+---------------------+\n| MAIN WINDOW OPTIONS |\n+---------------------+\n\n Main window from which user can choose the operation to perform\n\n Vlan operation         [OPTIONS]\n\n\t\t\tVlan Finder:\n\t\t\t\tProvides user with a window where they can choose a router from the IP list and the respective interface\n\t\t\t\tFrom which the program will return a list of free vlans in a separate output window. This works on a single IP address chosen.\n\t\t\t\tUser has the flexibility of specifying the range of interest by using the radio button options\n\n\t\t\tVlan Finder2:\n\t\t\t\tProvides user with a window where they can choose two router from the IP list and their respective interface\n\t\t\t\tFrom which the program will return a list of co-existing free vlans from the two routers in a separate output window. This works on a the two IP addresses chosen.\n\t\t\t\tUser has the flexibility of specifying the range of interest by using the radio button options.\n\t\t\t\tUseful for layer 2 pseudowires and for identifying free vlans from two interfaces of the same router.\n\n\t\t\tLocate vlan:\n\t\t\t\tProvides user with a window to input the VLAN id and the program returns the list of IP addresses from the devices database in which the VLAN id has been used.\n\t\t\t\tIf the respective interface of the router has been configured with interface description, the description is also included in the output.\n\n\n Ipv4 operation         [OPTIONS]\n\n\t\t\tLocate address: \n\t\t\t\tProvides user with a window to input an IP address (with prefix length) or subnet (with prefix length)\n\t\t\t\tThe program then returns the list of IP addresses from the devices database in which the IP/subnet or its subnets have been used.\n\t\t\t\tIncludes support for VRFs and logical systems for JunOS.\n\t\t\t\tFor cisco IOS and IOSXE software search sections are [access-list|interfaces|ip route|prefix-lists].\n\t\t\t\tFor juniper JunOS search hierarchies are [interfaces|static route|route-filter|prefix-lists]\n\n\n\n Locate service         [OPTIONS]\n\n\t\t\tLocate vlan:\n\t\t\t\tProvides user with a window to input the VLAN id and the program returns the list of IP addresses from the devices database in which the VLAN id has been used.\n\t\t\t\tIf the respective interface of the router has been configured with interface description, the description is also included in the output.\n\n\t\t\tLocate address: \n\t\t\t\tProvides user with a window to input an IP address (with prefix length) or subnet (with prefix length)\n\t\t\t\tThe program then returns the list of IP addresses from the devices database in which the IP/subnet or its subnets have been used.\n\t\t\t\tFor cisco IOS and IOSXE software search sections are [access-list|interfaces|ip route|prefix-lists].\n\t\t\t\tFor juniper JunOS search hierarchies are [interfaces|static route|route-filter|prefix-lists]\n\n\t\t\tLocate name:\n\t\t\t\tProvides user with a window to input the name of service or client. This name must be part of the description of the interface assosicated with the client.\n\t\t\t\tThe program then returns the list of IP addresses from the devices database in which the name is found.\n\t\t\t\tSupports regular expression for input however the regular expression style must be supported by the device operationg system.\n\t\t\t\tJunOS and Cisco IOS and IOS XE do not support GNU notations for regular expressions such as \\d or \\s or \\w as well as quantifiers in curly brackets {}\n\t\t\t\tWith JunOS the length of the pattern and command used to search for the pattern altogher can only be as long 65499 bytes about \n\n\n Burst packages         Works with a burst server specified in the settings tab for burst packages.\n\t\t\tThe burst server must exist and it must have the bBurst code installed.\n\t\t\tThe server must be linux based. More on bBurst is covered in bBurt section.\n\t\t\tDependancies:\n\t\t\t\tbBurst code\n\t\t\t\tcrontab which will schedule the running of the bBurst code\n\t\t\t\tpython which is the language used to write the bBurst code\n\n\t\t\t[OPTIONS]\n\n\t\t\tAdd a client:\n\t\t\t\tProvides user a window to add details pertaining to addition of a new client to the system.\n\t\t\t\tThis operation is done on the burst server specified on the settings tab. The server details will be shown on the top of this window.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\t\t\tRemoce client\n\t\t\t\tProvides user a window to specify details pertaining to removal of an existing client from the system.\n\t\t\t\tThis operation is done on the burst server specified on the settings tab. The server details will be shown on the top of this window.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\t\t\tMove client\n\t\t\t\tProvides user a window to modify details pertaining to an existing client to the system.\n\t\t\t\tUser is only required to specify the updated information related to the client.\n\t\t\t\tThis operation is done on the burst server specified on the settings tab. The server details will be shown on the top of this window.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\t\t\tView clients\n\t\t\t\tProvides user a window to view all the existing clients in the system with their respective packages.\n\t\t\t\tThe presentation format will be in a human readable easy to understand text form, each line presents a single client.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\n B on Demand            Works with a bandwidth on demand server specified in the settings tab for bandwidth on demand.\n\t\t\tThe bandwidth on demand server must exist and it must have the basowilldo code installed.\n\t\t\tThe server must be linux based. More on bandwidth on demand is covered in bandwodth on demand section.\n\t\t\tDependancies :\n\t\t\t\tat which will schedule the running of the basowilldo code\n\t\t\t\tbasowilldo \n\t\t\t\tpython which is the language used to write the bBurst code\n\n\t\t\t[OPTIONS]\n\n\t\t\tAdd a ticket:\n\t\t\t\tProvides user a window to add details pertaining to current and the demanded bandwidth subscriptions and the required duration.\n\t\t\t\tThis information is saved on the bandwidth on demand server specified in the settings tab. The server details will be shown on the top of this window.\n\t\t\t\tThe program will generate a script to revert the bandwidth subscription and schedule the task on the specified date.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\t\t\tDelete ticket\n\t\t\t\tProvides user a window from which to remove a pending ticket from the system.\n\t\t\t\tThis operation is done on the bandwidth on demand server specified on the settings tab. The server details will be shown on the top of this window.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\t\t\tUpdate ticket\n\t\t\t\tProvides user a window to modify details pertaining to an existing ticket in the system.\n\t\t\t\tUser is only required to specify the updated information related to the ticket.\n\t\t\t\tThis operation is done on the bandwidth on demand server specified in the settings tab. The server details will be shown on the top of this window.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\t\t\tView tickets\n\t\t\t\tProvides user a window to view all the pending tickets in the system with their respective due dates.\n\t\t\t\tThe presentation format will be in a human readable text form.\n\t\t\t\tIf the server details and file paths have not been specified this option will be unavailable.\n\n\n\n\n Provision service      Provides user with a dedicated window for service provisioning.\n\n\t\t\t[OPTIONS]\n\n\t\t\tInternet:\n\t\t\t\tFor internet provisioning the program offers support for both ipv4 and ipv6 with auto vlan listing and bandwidth policing.\n\t\t\t\tThis wizard can also be used to partially provision layer 3 MPLS in terms of IP address assignment, traffic policing and vlan selection.\n\t\t\t\tNo support for advanced layer 3 MPLS VRFs and routing configurations.\n\t\t\t\tAfter the system configures the service it will display what has been done before and after as well as the results of reachability test on the provisoned service.\n\n\n\t\t\tLayer 2 MPLS:\t\t\t\n\t\t\t\tProvides support for player 2 MPLS pseudowires/l2circuits Martini based using targeted LDP.\n\t\t\t\tThe program offers auto vlan listing and bandwidth policing and auto virtual-circuit-id selection.\n\t\t\t\tThe MTU must be explicitly specified. This is to facilitate multi vendor compatibility.\n\t\t\t\tAfter the system configures the service it will display what has been done before and after as well as the results of reachability test on the provisoned service.\n\t\t\t\t\n\t\t\t\tTesting methodology:\n\t\t\t\t\tFor layer 2 MPLS the latest device to commit the configuration will have the most accurate reachability test. Despite the fact that the devices will be configured simultaneously,\n\t\t\t\t\tone of the device will complete the configuration faster than the other and will ran tests while the other device is still provisioning the test. \n\t\t\t\t\tThis is not an error as the processing speed of the device depends on the device hardware resources and response time with respect to this program.\n\t\t\t\t\tTherefore if the output of the tests from the two devices are similar the test is conclusive.\n\t\t\t\t\tIf they differ the successful test is the conlusive test.\n\n\n+----------------------+\n| BURST PACKAGE SERVER |\n+----------------------+\n\n Requirement:\n \t- crontab\n\t- bBurst code\n\n bBurst will be put in a dedicated direcory in a linux server. Does not require a dedicated server you can use an existing server that is active in the network all the time for running scheduled tasks at non regular working hours\n\n Installation steps:\n 1. Create a directory to put the device database it can be the same database used  by bandwidth on demand if you are using the same server\n\n 2. Put the device database in this directory; the device database will have ".bas" extension. You can copy the file from the clients running the main program in windows\n\n 3. Create a directory to put the burst client database\n\n 4. Create a file "clients.db" and put a test client\n\tFormat:\n\tpe=192.168.56.36    interface=em1       vlan=400   daybandwidth=1M    nightbandwidth=5M    starttime=1800  endtime=0800  days=weekends  sitename=test_site\n\tNote: the bandwidth column must contain the bandwith policer or service policy name as specified in the respective router in the pe column. This is one time setup and the process will be automated later.\n\n 5. Create a dedicated directory and put the bBurst executable use the Debian version for ubuntu server or Redhat version for Centos Server\n\tThis path is to be used in the application settings to specify the burst server working directory\n\tIt is recommended you put the clients database in this directory as well\n\n 6. Put the executable in the created directory\n\n 7. run the bBurst executable with option -testip and -creddir\n\tOption -testip is used to test credentials against the secified IP address, it could be any active IP iaddress in your network\n\tOption -creddir is used to specify the full path to the directory you want to save your router credential for auto-retrieval and logins\n\tit is recommended the credential directory be the same as the directory created in step 1 above,\n\n\t\tuser@server:~/docs/burstmanager$ bBurst -testip 192.168.56.36 -creddir "/home/basondole/docs/burstmanager/"\n\t\tUsername:\n\n\tYou will be promted to enter username and password. This will validate your credentials and store them in the specified path in an encrypted format.\n\tAfter above you can re-run the command to verify and you should get a message "INFO: username and password auto-retrieved"\n\n\t\tuser@server:~/docs/burstmanager$ bBurst -testip 192.168.56.36 -creddir "/home/basondole/docs/burstmanager/"\n\t\tINFO: username and password auto-retrieved\n\t\tSun Apr  7 06:09:22 2019 (user = paul) initializing connection   192.168.56.36\n\t\tSun Apr  7 06:09:22 2019 (user = paul) authentication starting 192.168.56.36  \n\t\tSun Apr  7 06:09:22 2019 (user = paul) passed authentication > 192.168.56.36  \n\t\tCredential saved successfully\n\n\tUse similar metodology to modify the credentials or regenerate the credential file if it gets corrupted or change the credentials file directory.\n\n\n 8. The bBurst must be executed with other options in order to do the auto configurations and logging. Use below option to run bBurst\n\tAll of the below options must be specified when running bBurst\n\t\tOption -creddir  specifies the credential directory path\n\t\tOption -ipdb\t specifies the device ip address database path\n\t\tOption -clientdb specifies the clients database path\n\t\tOption -logdir\t specifies the log directoy path\n\t\n\n\teg: user@server:~/docs/burstmanager$ bBurst -creddir "/home/basondole/docs/burstmanager/" -ipdb "/home/basondole/docs/burstmanager/devices.bas" -clientdb "/home/basondole/docs/burstmanager/burstclients.db" -logdir "/home/basondole/docs/Logs/"\n\t\n\tIf no errors are generated. The setup is succesful. If you get error messages revisit steps 1 through 8\n\n 9. Create a cronjob to run at desired time depeding on your packages start and end times\n\tFor testing create a cronob to run every 5 minutes\n\n\tbasondole@bigpaul:~$ crontab -l | egrep "^\\*"\n\t*/5 * * * * cd /home/basondole/doc/burstmanager && /home/basondole/docs/burstmanager/bBurst -creddir "/home/basondole/docs/burstmanager/" -ipdb "/home/basondole/docs/burstmanager/device.bas" -clientdb "/home/basondole/docs/burstmanager/burstclients.db" -logdir "/home/basondole/docs/Logs/"  1> /home/basondole/docs/Logs/cospa.crontab.log 2> /home/basondole/PACOM/Logs/cospa.crontab.err\n\tbasondole@bigpaul:~$ \n\n\tFor reference and this cronjob will put the stdout of the executed cron job to a file cospa.crontab.log and the std error to cospa.crontab.err\n\n\tThis cronjob runs every 5 minutes. When it runs;\n\t\tIt goes to dicrectory /home/basondole/doc/burstmanager\n\t\tThen run /home/basondole/docs/burstmanager/bBurst -creddir "/home/basondole/docs/burstmanager/" -ipdb "/home/basondole/docs/burstmanager/routers.txt" -clientdb "/home/basondole/docs/burstmanager/burstclients.baso" -logdir "/home/basondole/docs/Logs/"\n\t\tThen save the output from cron execution to /home/basondole/docs/Logs/cospa.crontab.log\n\t\tand save cron encoutered errors to /home/basondole/docs/Logs/cospa.crontab.err \n\n 10. Logging\n    \tIn addition to the stdout and std error loggin done by cron in step 9 above. Bburst creates two types of log file.\n\tThe log file will be created in the log directory specified with the -logdir option\n\tType 1 log:\n\t\t192.168.56.57-cospa.log this will show the commands that have been issued by bBurst to the pe ip 192.168.56.57\n\tType 2 log:\n\t\t192.168.56.57-cli.log   this will show the actual interaction berween bBurst and the cli for the pe ip 192.168.56.57 with time stamps\n\n 11. For client application to this server authenticaton refer CLIENT SERVER ATHENTICATION section\n\n\n\n\n+----------------------------+\n| BANDWIDTH on DEMAND SERVER |\n+----------------------------+\n\n Requirement:\n\t- at and bash\n\t- basowilldo code\n\n basowilldo will be put in a dedicated direcory in a linux server. Does not require a dedicated server you can use an existing server that is active in the network all the time for running scheduled tasks at non regular working hours\n\n Installation steps:\n 1. Create a directory to put the device database it can be the same database used  by burst packages if you are using the same server\n\n 2. put basowilldo in the directory created in step 1 above\n\n 3. In the directory created in step 1 above create two other directories named "Logs" and "PendingTickets"\n\n 4. run basowilldo with options -commands and -ipaddress to verify your credentials. Note these credentials will be used in future schedules tasks.\n\tUse any command of your preference as the command option and any ip address active in the network to ssh to\n\t\n\t\tuser@server:~/docs/bOd$ ./basowilldo -commands "show system uptime" -ipaddress 192.168.56.36\n\n\tYou will be promted to enter username and password. This will validate your credentials and store them in current directory in an encrypted format.\n\tAfter above you can re-run the command to verify and you should get a message "INFO: username and password auto-retrieved"\n\n\t\tuser@server:~/docs/bOd$ ./basowilldo -commands "show system uptime" -ipaddress 192.168.56.36\n\t\tINFO: username and password auto-retrieved\n\t\tSun Apr  7 06:09:22 2019 (user = paul) initializing connection   192.168.56.36\n\t\tSun Apr  7 06:09:22 2019 (user = paul) authentication starting 192.168.56.36  \n\t\tSun Apr  7 06:09:22 2019 (user = paul) passed authentication > 192.168.56.36  \n\t\tCredential saved successfully\n\n\tUse similar metodology to modify the credentials or regenerate the credential file if it gets corrupted or change the credentials file directory.\n\n\n 5. Copy the generated .baslogin file from step 4 above to your home directory since the basowilldo will be ran from home by the "at" script, it will look for credentials in the home directory\n\n 6. Test running basowilldo from your home directory and you should get a message "INFO: username and password auto-retrieved"\n\n\tbasondole@bigpaul:~$ /home/basondole/bOB/basowilldo -commands "show system uptime" -ipaddress 192.168.56.36\n\n\tINFO: username and password auto-retrieved\n\n 7. For client application to this server authenticaton refer CLIENT SERVER ATHENTICATION section\n\n\n\n\n+------------------------------+\n| CLIENT SERVER AUTHENTICATION |\n+------------------------------+\n\n While access to devices is limited to the use of username and password. Clients will use keys to authenticate with the server in order to add, view or remove clients.\n The user of the client must create an rsa key that will be added to the authorised keys in the server.\n\n Creating keys in windows:\n Find out what application users PC use for native SSH support\n if OpenSSH:\n\n 1. go to c:\\windows\\system32\\openssh\n\n 2. run ssh-keygen\n\n 3. Ouput below\n\tc:\\Windows\\System32\\OpenSSH>ssh-keygen.exe\n\tGenerating public/private rsa key pair.\n\tEnter file in which to save the key (C:\\Users\\u/.ssh/id_rsa): C:\\Users\\u\\.ssh\\id_rsa\n\tEnter passphrase (empty for no passphrase):\n\tEnter same passphrase again:\n\tYour identification has been saved in C:\\Users\\u\\.ssh\\id_rsa.\n\tYour public key has been saved in C:\\Users\\u\\.ssh\\id_rsa.pub.\n\tThe key fingerprint is:\n\tSHA256:BZLZjkj7OYTqMw4xQekJwgDO7PS0jgoyQUMkQIRyDeo paul@LWBS-STZ-150YNL\n\tThe key\'s randomart image is:\n\t+---[RSA 2048]----+\n\t|#*oo  .+.        |\n\t|%+. o o...       |\n\t|BO.o + o  .      |\n\t|=++ = o ..       |\n\t|+E + o .S        |\n\t| ++   +          |\n\t|=o .   .         |\n\t|+o+              |\n\t|...o             |\n\t+----[SHA256]-----+\n\n\tc:\\Windows\\System32\\OpenSSH>\n\n 4. Open the location and copy the public key\n\n 5. Open the server and edit the authorized host to add the copied key above\n\n\tbasondole@bigpaul:~/.ssh$ nano authorized_keys\n\tssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZG.....\n\n'
    return man

if __name__=='__main__':
    print manpage()
